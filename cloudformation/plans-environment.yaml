# A template that creates a Plans service
# Version: da39a3ee5e6b4b0d3255bfef95601890afd80709
#
# Copyright 2018 Melon Software Ltd (UK), all rights reserved.  Used under license.
#
AWSTemplateFormatVersion: "2010-09-09"
Description: "Creates a Plans service environment"

Parameters:

    Environment:
        Type: "String"
        Description: "The name of the environment"

    # Users API version
    UsersApiVersion: 
        Type: "String"
        Default: "2_4"
        Description: "Corresponding Users API version"

    ServiceAuthPolicyArn:
        Type: "String"
        Default: ""
        Description: "IAM Policy ARN granting access to the serviceauth lambda function"

    # The second part of the CIDR block for the VPN (10.xx.0.0/24).
    VpnCidr:
        Type: "Number"
        MinValue: 0
        MaxValue: 255
        Default: "2"
        Description: "The second digit in the IP range (10.xx.0.0/16).  VPNs with overlapping address spaces cannot be peered."
    MongoDbPeeringId:
        Type: "String"
        Default: ""
        AllowedPattern: "^(vpc|pcx)-[a-z0-9]+|$"
        Description: "VPC ID to create a new peering connection to, or Peering Connection ID to add routes to an existing connection"
    MongoDbPeeringCidr:
        Type: "String"
        Description: "The CIDR range in the peered VPC to route"
        Default: ""
        AllowedPattern: "^((\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2}))|$"
        ConstraintDescription: "Must be a valid IP CIDR range of the form x.x.x.x/x."

Mappings:
    TemplateVersion:
        Self: { Commit: "da39a3ee5e6b4b0d3255bfef95601890afd80709" }
        Infrastructure: { Commit: "db769e7534f71b09ae6dc8a50b902a0fef788139" }

Metadata:
    "AWS::CloudFormation::Interface":
        ParameterGroups:
          - Label: { default: "Environment" }
            Parameters:
              - "Environment"
          - Label: { default: "Networking" }
            Parameters:
              - "VpnCidr"
              - "MongoDbPeeringId"
              - "MongoDbPeeringCidr"

        ParameterLabels:
            Environment: { default: "Environment" }
            VpnCidr: { default: "VPN CIDR block" }
            MongoDbPeeringId: { default: "MongoDB peering VPC ID" }
            MongoDbPeeringCidr: { default: "MongoDB peering CIDR" }

Conditions:
    CreateVpc: { "Fn::Not": [ { "Fn::Equals": [ { Ref: "MongoDbPeeringCidr" }, "" ] } ] }
    ServiceAuthPolicyProvided: { "Fn::Not": [ { "Fn::Equals": [ { Ref: "ServiceAuthPolicyArn" }, "" ] } ] }

Resources:

    ##########################################################################################################
    ##  S3
    ##########################################################################################################

    S3Bucket:
        Type: "AWS::S3::Bucket"
        Properties:
            BucketName: { "Fn::Sub": "fathom-otf2" }
            NotificationConfiguration:
                LambdaConfigurations:
                    - Event: "s3:ObjectCreated:*"
                      Function: { "Fn::GetAtt": [ "DataParseLambda", "Arn" ]}
            Tags:
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "plans" }
              - { Key: "Environment", Value: { Ref: "Environment" } }
              - { Key: "Service", Value: "apigateway" }
        # Don't delete this if we accidentally delete the stack (which would fail anyway unless the bucket is empty)
        DeletionPolicy : "Retain"

    ##########################################################################################################
    ## VPC & NETWORKING
    ##########################################################################################################

    VpcStack:
        Type: "AWS::CloudFormation::Stack"
        Properties:
            Parameters:
                Environment: { Ref: "Environment" }
                SubnetConfiguration: "Public A/B, Private A/B"
                PeeringCidr: { Ref: "MongoDbPeeringCidr" }
                PeeringId: { Ref: "MongoDbPeeringId" }
                Project: "plans"
                Service: "vpc"
                VpnCidr: { Ref: "VpnCidr" }
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "plans-${Environment}-execute" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "plans" }
              - { Key: "Environment", Value: { Ref: "Environment" } }
              - { Key: "Service", Value: "vpc" }
            TemplateURL: { "Fn::Sub": [ "https://s3.amazonaws.com/${InfrastructureBucketName}/cloudformation/infrastructure/${TemplateVersion}/vpc.yaml", {
                InfrastructureBucketName: { "Fn::ImportValue": "InfrastructureBucketName" },
                TemplateVersion: { "Fn::FindInMap": [ "TemplateVersion", "Infrastructure", "Commit" ] }
            } ] }
            TimeoutInMinutes: 10
        Condition: "CreateVpc"

    ##########################################################################################################
    ##  API GATEWAY
    ##########################################################################################################

    ApiGatewayLambdaExecutionRole:
        Type: "AWS::IAM::Role"
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                  - Effect: "Allow"
                    Principal: { Service: [ "lambda.amazonaws.com" ] }
                    Action: "sts:AssumeRole"
            ManagedPolicyArns:
              - "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
              - "arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess"
              - "arn:aws:iam::aws:policy/service-role/AWSLambdaSQSQueueExecutionRole"
              - { "Fn::If": [ "ServiceAuthPolicyProvided", { Ref: "ServiceAuthPolicyArn" }, { Ref: "AWS::NoValue" } ] }
            Policies:
              - PolicyName: "default"
                PolicyDocument:
                    Version: "2012-10-17"
                    Statement:
                      - Action:
                          - "secretsmanager:GetSecretValue"
                        Effect: "Allow"
                        Resource: { "Fn::Sub": "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:plans/${Environment}/*" }
                      - Effect: "Allow"
                        Action:
                          - "iot:Publish"
                        Resource:
                          - { "Fn::Sub": "arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topic/users/${Environment}/*" }
                          - { "Fn::Sub": "arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topic/plans/${Environment}/*" }
                      - Action:
                          - "sqs:SendMessage"
                        Effect: "Allow"
                        Resource: "*"
                      - Action:
                          - "s3:GetObject"
                          - "s3:PutObject"
                        Effect: "Allow"
                        Resource: "*"
                      # - Action:
                      #     - "lambda:InvokeFunction"
                      #   Effect: "Allow"
                      #   Resource: "*"
            RoleName: { "Fn::Sub": "plans-${Environment}-apigateway-${AWS::Region}" }

    ##########################################################################################################
    ##  LAMBDA
    ##########################################################################################################

    LambdaVpcSecurityGroup:
        Type: "AWS::EC2::SecurityGroup"
        Properties:
            GroupDescription: "Security group which allows access for AWS Lambda"
            GroupName: { "Fn::Sub": "plans-${Environment}-apigateway-execute" }
            SecurityGroupIngress:
                # All ports open from internal access
              - IpProtocol: "tcp"
                FromPort: "0"
                ToPort: "65535"
                CidrIp: "0.0.0.0/0"
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "plans-${Environment}-apigateway-execute" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "plans" }
              - { Key: "Environment", Value: { Ref: "Environment" } }
              - { Key: "Service", Value: "apigateway" }
            VpcId: { "Fn::GetAtt": [ "VpcStack", "Outputs.VpcId" ] }
        Condition: "CreateVpc"

    ApiGatewayLambda:
        Type: "AWS::Lambda::Function"
        Properties:
            Code:
                S3Bucket: { "Fn::ImportValue": "InfrastructureBucketName" }
                S3Key: { "Fn::Sub": [ "lambdas/plans/${TemplateVersion}/apigateway.zip", {
                    TemplateVersion: { "Fn::FindInMap": [ "TemplateVersion", "Self", "Commit" ] }
                } ] }
            Environment:
                Variables:
                    SERVICE: 'plans'
                    ENVIRONMENT: { Ref: 'Environment' }
                    AWS_ACCOUNT_ID: { Ref: "AWS::AccountId" }
                    USERS_API_VERSION: { Ref: "UsersApiVersion"}
            Handler: "apigateway.handler"
            Runtime: "python3.6"
            Timeout: "60"
            MemorySize: "512"
            Role: { "Fn::GetAtt" : [ "ApiGatewayLambdaExecutionRole", "Arn" ] }
            FunctionName: { "Fn::Sub": "plans-${Environment}-apigateway-execute" }
            Layers: [
              "arn:aws:lambda:us-west-2:887689817172:layer:sklearn:1"
            ]
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "plans-${Environment}-apigateway-execute" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "plans" }
              - { Key: "Environment", Value: { Ref: "Environment" } }
              - { Key: "Service", Value: "apigateway" }
            TracingConfig:
                Mode: "Active"
            VpcConfig: { "Fn::If": [
                "CreateVpc",
                {
                    SubnetIds: { "Fn::Split": [ ",", { "Fn::GetAtt": [ "VpcStack", "Outputs.PrivateSubnetIds" ] } ] },
                    SecurityGroupIds: [ { Ref: "LambdaVpcSecurityGroup" } ]
                },
                { Ref: "AWS::NoValue" }
            ]}


    DataParseLambda:
        Type: "AWS::Lambda::Function"
        Properties:
            Code:
                S3Bucket: { "Fn::ImportValue": "InfrastructureBucketName" }
                S3Key: { "Fn::Sub": [ "lambdas/plans/${TemplateVersion}/apigateway.zip", {
                    TemplateVersion: { "Fn::FindInMap": [ "TemplateVersion", "Self", "Commit" ] }
                } ] }
            Environment:
                Variables:
                    SERVICE: 'plans'
                    ENVIRONMENT: { Ref: 'Environment' }
                    AWS_ACCOUNT_ID: { Ref: "AWS::AccountId" }
                    USERS_API_VERSION: { Ref: "UsersApiVersion"}
            Handler: "parse_performance_data.lambda_handler"
            Runtime: "python3.6"
            Timeout: "60"
            MemorySize: "512"
            Role: { "Fn::GetAtt" : [ "ApiGatewayLambdaExecutionRole", "Arn" ] }
            FunctionName: { "Fn::Sub": "plans-${Environment}-data-parse" }
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "plans-${Environment}-data-parse" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "plans" }
              - { Key: "Environment", Value: { Ref: "Environment" } }
              - { Key: "Service", Value: "apigateway" }
            TracingConfig:
                Mode: "Active"
            # VpcConfig: { "Fn::If": [
            #     "CreateVpc",
            #     {
            #         SubnetIds: { "Fn::Split": [ ",", { "Fn::GetAtt": [ "VpcStack", "Outputs.PrivateSubnetIds" ] } ] },
            #         SecurityGroupIds: [ { Ref: "LambdaVpcSecurityGroup" } ]
            #     },
            #     { Ref: "AWS::NoValue" }
            # ]}


    ApigatewayStack:
        Type: "AWS::CloudFormation::Stack"
        Properties:
            Parameters:
                Project: "plans"
                Environment: { Ref: "Environment" }
                Service: "apigateway"
                LambdaArn: { "Fn::GetAtt": [ "ApiGatewayLambda", "Arn" ] }
                CreateAsync: "true"
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "plans-${Environment}-apigateway" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "plans" }
              - { Key: "Environment", Value: { Ref: "Environment" } }
              - { Key: "Service", Value: "apigateway" }
            TemplateURL: { "Fn::Sub": [ "https://s3.amazonaws.com/${InfrastructureBucketName}/cloudformation/infrastructure/${TemplateVersion}/apigateway.yaml", {
                InfrastructureBucketName: { "Fn::ImportValue": "InfrastructureBucketName" },
                TemplateVersion: { "Fn::FindInMap": [ "TemplateVersion", "Infrastructure", "Commit" ] }
            } ] }
            TimeoutInMinutes: 30

    AsyncPushPolicy:
        Type: "AWS::IAM::Policy"
        Properties:
            PolicyName: { "Fn::Sub": "plans-${Environment}-asyncpush" }
            Roles: [ { Ref: 'ApiGatewayLambdaExecutionRole' } ]
            PolicyDocument:
                Version: "2012-10-17"
                Statement:
                  - Action:
                      - "sqs:SendMessage"
                    Effect: "Allow"
                    Resource: { 'Fn::GetAtt': [ 'ApigatewayStack', 'Outputs.AsyncSqsQueueArn' ] }


    ##########################################################################################################
    ##  DAILY SCHEDULER
    ##########################################################################################################

    DailySchedulerExecutionRole:
        Type: "AWS::IAM::Role"
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                  - Effect: "Allow"
                    Principal: { Service: [ "lambda.amazonaws.com" ] }
                    Action: "sts:AssumeRole"
            ManagedPolicyArns:
              - "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
              - "arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess"
              - { "Fn::If": [ "ServiceAuthPolicyProvided", { Ref: "ServiceAuthPolicyArn" }, { Ref: "AWS::NoValue" } ] }
            Policies:
              - PolicyName: "default"
                PolicyDocument:
                    Version: "2012-10-17"
                    Statement:
                      - Action:
                          - "sqs:SendMessage"
                        Effect: "Allow"
                        Resource:
                          - { "Fn::Sub": "arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:plans-${Environment}-apigateway-async" }
                      - Action:
                          - "sqs:ListQueues"
                        Effect: "Allow"
                        Resource: "*"
            RoleName: { "Fn::Sub": "plans-${Environment}-apigateway-dailyscheduler-${AWS::Region}" }

    DailySchedulerLambda:
        Type: "AWS::Lambda::Function"
        Properties:
            Code:
                ZipFile: |
                    import boto3, json, os
                    _lambda_client = boto3.client('lambda')
                    _sqs_client = boto3.client('sqs')
                    def handler(_, __):
                        payload = {
                            "path": '/plans/4_8/misc/dailycron',
                            "httpMethod": 'POST',
                            "headers": {
                                "Accept": "*/*",
                                "Authorization": 'NOT_APPLICABLE',
                                "Content-Type": "application/json",
                                "User-Agent": "Biometrix/DailyScheduler",
                            },
                            "pathParameters": {"endpoint": 'misc/dailycron'},
                            "stageVariables": {"LambdaAlias": '4_8'},
                            "body": None,
                            "isBase64Encoded": False
                        }

                        _sqs_client.send_message(
                            QueueUrl='https://sqs.{AWS_REGION}.amazonaws.com/{AWS_ACCOUNT_ID}/plans-{ENVIRONMENT}-apigateway-async'.format(**os.environ),
                            MessageBody=json.dumps(payload),
                        )

                    def get_service_token():
                        res = _lambda_client.invoke(FunctionName='users-{ENVIRONMENT}-apigateway-serviceauth:2_0'.format(**os.environ))
                        return json.loads(res['Payload'].read().decode('utf-8'))['token']

            Environment:
                Variables:
                    AWS_ACCOUNT_ID: { Ref: 'AWS::AccountId' }
                    ENVIRONMENT: { Ref: 'Environment' }
            Handler: "index.handler"
            MemorySize: "256"
            Runtime: "python3.6"
            Timeout: "30"
            Role: { "Fn::GetAtt" : [ "DailySchedulerExecutionRole", "Arn" ] }
            FunctionName: { "Fn::Sub": "plans-${Environment}-apigateway-dailyscheduler" }
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "plans-${Environment}-apigateway-dailyscheduler" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: 'plans' }
              - { Key: "Environment", Value: { Ref: "Environment" } }
              - { Key: "Service", Value: 'apigateway' }

    DailySchedulerScheduledRule:
        Type: "AWS::Events::Rule"
        Properties:
            Description: "ScheduledRule"
            ScheduleExpression: "cron(30 5 * * ? *)"  # 5:30am UTC every day
            State: "ENABLED"
            Targets:
              - Arn: { "Fn::GetAtt": [ "DailySchedulerLambda", "Arn" ] }
                Id: "target"

    DailySchedulerInvokePermission:
        Type: "AWS::Lambda::Permission"
        Properties:
            FunctionName: { "Fn::GetAtt": [ "DailySchedulerLambda", "Arn" ] }
            Action: "lambda:InvokeFunction"
            Principal: "events.amazonaws.com"
            SourceArn: { "Fn::GetAtt": [ "DailySchedulerScheduledRule", "Arn" ] }




    ##########################################################################################################
    ## MONITORING
    ##########################################################################################################

    MonitoringStack:
        Type: "AWS::CloudFormation::Stack"
        Properties:
            Parameters:
                Environment: { Ref: "Environment" }
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "plans-${Environment}-monitoring" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "plans" }
              - { Key: "Environment", Value: { Ref: "Environment" } }
              - { Key: "Service", Value: "monitoring" }
            TemplateURL: { "Fn::Sub": [ "https://s3.amazonaws.com/${InfrastructureBucketName}/cloudformation/plans/${TemplateVersion}/plans-monitoring.yaml", {
                InfrastructureBucketName: { "Fn::ImportValue": "InfrastructureBucketName" },
                TemplateVersion: { "Fn::FindInMap": [ "TemplateVersion", "Self", "Commit" ] }
            } ] }
            TimeoutInMinutes: 10
